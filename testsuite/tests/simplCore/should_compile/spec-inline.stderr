
==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 86, types: 26, coercions: 0, joins: 1/2}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
Roman.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.$trModule3 = GHC.Types.TrNameS Roman.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
Roman.$trModule2 = "Roman"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Roman.$trModule1 = GHC.Types.TrNameS Roman.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Roman.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Roman.$trModule =
  GHC.Types.Module Roman.$trModule3 Roman.$trModule1

-- RHS size: {terms: 60, types: 13, coercions: 0, joins: 1/2}
Roman.$wfoo [InlPrag=[0]] :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 100 0}]
Roman.$wfoo =
  \ (ww :: GHC.Prim.Int#) ->
    joinrec {
      $sgo [Occ=LoopBreaker]
        :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
      [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []]
      $sgo (sc :: GHC.Prim.Int#) (sc1 :: GHC.Prim.Int#) =
        let {
          m :: GHC.Prim.Int#
          [LclId]
          m =
            GHC.Prim.+#
              (GHC.Prim.+#
                 (GHC.Prim.+#
                    (GHC.Prim.+# (GHC.Prim.+# (GHC.Prim.+# sc sc) sc) sc) sc)
                 sc)
              sc } in
        case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<=# sc1 0#) of {
          False ->
            case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# sc1 100#) of {
              False ->
                case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# sc1 500#) of {
                  False -> jump $sgo (GHC.Prim.+# m m) (GHC.Prim.-# sc1 1#);
                  True -> jump $sgo m (GHC.Prim.-# sc1 3#)
                };
              True -> jump $sgo sc (GHC.Prim.-# sc1 2#)
            };
          True -> 0#
        }; } in
    jump $sgo 6# ww

-- RHS size: {terms: 10, types: 4, coercions: 0, joins: 0/0}
foo [InlPrag=INLINE[0]] :: Int -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w [Occ=Once!] :: Int) ->
                 case w of { GHC.Types.I# ww1 [Occ=Once] ->
                 case Roman.$wfoo ww1 of ww2 { __DEFAULT -> GHC.Types.I# ww2 }
                 }}]
foo =
  \ (w :: Int) ->
    case w of { GHC.Types.I# ww1 ->
    case Roman.$wfoo ww1 of ww2 { __DEFAULT -> GHC.Types.I# ww2 }
    }



